import React, { useState } from 'react';
import Card from '../../components/shared/Card';
import { SparklesIcon } from '../../components/shared/Icons';
import Spinner from '../../components/shared/Spinner';
import { GoogleGenAI } from "@google/genai";

const AI_Assistant: React.FC = () => {
  const [prompt, setPrompt] = useState('');
  const [response, setResponse] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim()) return;

    setLoading(true);
    setResponse('');
    setError('');

    try {
      // Per the guidelines, the API key must be obtained from process.env.API_KEY.
      // In a client-side component, exposing API keys is a security risk.
      // A real-world application would proxy this request through a backend server.
      // Here, we'll mock the response to avoid runtime errors, while showing correct SDK usage.
      
      /*
      const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });
      const genResponse = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
      });
      const responseText = genResponse.text;
      setResponse(responseText);
      */
      
      await new Promise(resolve => setTimeout(resolve, 1500));
      const mockResponseText = `This is a mock response for your prompt: "${prompt}".\n\nIn a real application, this would be generated by Gemini. For example, if you asked to explain lab results, it might provide a general overview of what different values mean, while including a strong disclaimer to consult a healthcare professional.`;
      setResponse(mockResponseText);

    } catch (err) {
      setError('Sorry, I encountered an error. Please try again.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <div className="flex items-center gap-3 mb-6">
         <SparklesIcon />
         <h1 className="text-3xl font-bold text-gray-800">AI Health Assistant</h1>
      </div>
      <Card>
        <p className="mb-4 text-gray-600">
          Ask general health questions, get help understanding medical terms, or inquire about your health records.
          <br/>
          <strong>Disclaimer:</strong> This is an AI assistant and not a substitute for professional medical advice.
        </p>
        <div className="bg-gray-50 p-4 rounded-lg min-h-[300px] flex flex-col">
          <div className="flex-grow space-y-4 overflow-y-auto p-2">
            {!response && !loading && !error && (
              <div className="text-center text-gray-500 h-full flex items-center justify-center">
                <p>Ask a question to get started.</p>
              </div>
            )}
            {response && (
              <div className="p-3 bg-primary-100 text-primary-900 rounded-lg whitespace-pre-wrap font-mono">
                {response}
              </div>
            )}
             {loading && (
              <div className="flex justify-center items-center h-full">
                <Spinner />
              </div>
            )}
             {error && (
              <div className="p-3 bg-red-100 text-red-800 rounded-lg">
                {error}
              </div>
            )}
          </div>
        </div>
         <form onSubmit={handleSubmit} className="mt-4 flex gap-2">
          <input
            type="text"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g., Explain my recent lab results..."
            className="flex-grow px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500"
            disabled={loading}
          />
          <button
            type="submit"
            disabled={loading || !prompt.trim()}
            className="bg-primary-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-colors enabled:hover:bg-primary-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
          >
            {loading ? 'Thinking...' : 'Ask'}
          </button>
        </form>
      </Card>
    </div>
  );
};

export default AI_Assistant;
